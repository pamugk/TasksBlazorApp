@page "/tasks/{Id:int}"
@attribute [Authorize]

@inject IdentityAuthStateProvider AuthStateProvider
@inject ITaskManagerApi TaskManager
@inject NavigationManager NavigationManager

@if (CriticalError)
{
    <div class="alert alert-danger text-center">
        @Error
    </div>
}
else
{
    @if (IsLoading)
    {
        <LoadingSpinner Enabled="true" />
    }
    else
    {
        <div class="d-flex flex-column">
            <label class="text-center text-danger">@Error</label>
            <TaskForm AcceptBtnText="Сохранить" Header="Редактирование задачи" @bind-Task="Task" DropOnSave="false" TaskSaved="@UpdateTask" />
            <div class="card card-default mt-3">
                <h2 class="text-center">Список комментариев</h2>
                <CommentList @bind-Comments="Comments" />
            </div>
        </div>
    }
}

@code {
    private CommentDto[] Comments { get; set; }
    private string Error { get; set; }
    [Parameter]
    public int Id { get; set; }
    private TaskDto Task { get; set; }
    private bool CriticalError { get; set; }
    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Error = null;
        try
        {
            IsLoading = true;
            Task = await TaskManager.GetTask(Id, await AuthStateProvider.GetToken());
            IsLoading = false;
            StateHasChanged();
            Comments = await TaskManager.GetComments(Id);
        }
        catch (NotAuthorizedException)
        {
            Error = "У вас нет прав на получение этой задачи";
            CriticalError = true;
        }
        catch (NotFoundException)
        {
            Error = "У вас нет прав на получение этой задачи";
            CriticalError = true;
        }
        catch (NotAuthenticatedException)
        {
            Error = "Похоже, время вашей сессии вышло";
            await AuthStateProvider.Logout();
        }
        catch (Exception e)
        {
            Error = "Похоже, нет соединения с сервером";
            Console.WriteLine(e.Message);
        }
    }

    private async Task UpdateTask(TaskDto updatedTask)
    {
        Error = null;
        try
        {
            await TaskManager.UpdateTask(updatedTask, await AuthStateProvider.GetToken());
            NavigationManager.NavigateTo("tasks");
        }
        catch (NotAuthorizedException)
        {
            Error = "Ай-ай-ай, нехорошо изменять статус чужой задачи";
            CriticalError = true;
        }
        catch (NotFoundException)
        {
            Error = "Странно, но задача на изменение не была найдена. Видать, тут больше делать нечего";
            CriticalError = true;
            NavigationManager.NavigateTo("tasks");
        }
        catch (NotAcceptableException)
        {
            Error = "Похоже, задача с таким заголовком уже есть";
            CriticalError = true;
        }
        catch (NotAuthenticatedException)
        {
            Error = "Похоже, время вашей сессии вышло";
            CriticalError = true;
            await AuthStateProvider.Logout();
        }
        catch (Exception e)
        {
            Error = "Похоже, нет соединения с сервером";
            Console.WriteLine(e.Message);
        }
        StateHasChanged();
    }
}
