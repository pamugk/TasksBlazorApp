<div class="rowcard card card-default w-50 mx-auto col-sm">
    @if (ProcessingQuery)
    {
        <StandbyMessage/>
    }
    else
    {
        <h4 class="card-header">@Header</h4>
        <EditForm Model="@taskModel" OnValidSubmit="@Accept">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="title">Заголовок: </label>
                <InputText @bind-Value="taskModel.Title" id="title" placeholder="Заголовок" />
            </div>
            <div class="form-group">
                <label for="title">Описание: </label>
                <InputText @bind-Value="taskModel.Description" id="description" placeholder="Такая-то задача" />
            </div>
            @if (Task != null)
            {
                <div class="form-group">
                    <label for="finished">Задача завершена: </label>
                    <InputCheckbox id="finished" @bind-Value="taskModel.IsFinished" />
                </div>
            }
            <input type="submit" class="btn btn-primary" value="@AcceptBtnText" />
        </EditForm>
    }
</div>

@code {
    [Parameter]
    public string AcceptBtnText { get; set; }
    [Parameter]
    public string Header { get; set; }

    private TaskModel taskModel { get; set; } = new TaskModel();
    private TaskDto task;
    [Parameter]
    public TaskDto Task
    {
        get => task;
        set
        {
            task = value;
            taskModel = new TaskModel();
            if (value != null)
            {
                taskModel.Title = Task.Title;
                taskModel.Description = Task.Description;
                taskModel.IsFinished = Task.IsFinished;
                StateHasChanged();
            }
        }
    }
    [Parameter]
    public EventCallback<TaskDto> TaskChanged { get; set; }
    [Parameter]
    public EventCallback<TaskDto> TaskSaved { get; set; }
    [Parameter]
    public bool DropOnSave { get; set; }
    private bool ProcessingQuery { get; set; }

    private async Task Accept()
    {
        ProcessingQuery = true;
        TaskDto tmpTask = Task == null ? new TaskDto() : Task;
        if (task != null)
        {
            tmpTask.Id = task.Id;
            tmpTask.UserId = task.UserId;
        }
        tmpTask.Title = taskModel.Title;
        tmpTask.Description = taskModel.Description;
        tmpTask.IsFinished = taskModel.IsFinished;
        await TaskSaved.InvokeAsync(tmpTask);
        if (DropOnSave)
            Task = null;
        ProcessingQuery = false;
    }
}
