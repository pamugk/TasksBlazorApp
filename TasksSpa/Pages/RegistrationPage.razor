@page "/registration"
@inject NavigationManager NavigationManager
@inject IdentityAuthStateProvider AuthStateProvider

<section class="card card-default mx-auto w-50 mx-auto">
    <h4 class="card-header">Регистрация</h4>
    <label class="text-center text-danger">@Error</label>
    <EditForm class="card-body" Model="@NewUser" OnValidSubmit="@Registration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="login">Логин: </label>
            <InputText @bind-Value="NewUser.Login" id="login" placeholder="Логин" />
        </div>
        <div class="form-group">
            <label for="password">Пароль: </label>
            <InputText @bind-Value="NewUser.Password" id="password" placeholder="******" type="password" />
        </div>
        <div class="form-group">
            <label for="password2">Повтор пароля: </label>
            <InputText @bind-Value="NewUser.PasswordRepeat" id="password2" placeholder="******" type="password" />
        </div>
        <input type="submit" class="btn btn-primary" value="Зарегистрироваться" />
    </EditForm>
</section>

@code {
    private string Error { get; set; }
    private RegistrationParams NewUser { get; set; } = new RegistrationParams();

    private async void Registration()
    {
        Error = null;
        try
        {
            await AuthStateProvider.Register(NewUser);
            NavigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            StateHasChanged();
        }
    }
}
