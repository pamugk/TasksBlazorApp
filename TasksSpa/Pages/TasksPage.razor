@page "/tasks"
@inject IdentityAuthStateProvider AuthStateProvider
@inject ITaskManagerApi TaskManager

    <div class="container">
        <label class="text-center text-danger">@Error</label>
        <div class="row">
            <TaskForm AcceptBtnText="Добавить" TaskSaved="AddTask" DropOnSave="true" Header="Добавление задачи" />
            <div class="rowcard card-default w-50 mx-auto col-sm">
                <h1 class="text-center">Список задач</h1>
                <section id="section-container">
                    <FilteringComponent OnFilterChanged="FilterChanged" />
                    <TaskList @bind-Tasks="FilteredTasks" TaskStatusChanged="ChangeTaskStatus" TaskRemoval="RemoveTask" />
                </section>
            </div>
        </div>
    </div>

@code {
    private string Error { get; set; }
    private TaskDto AddedTask { get; set; }
    private List<TaskDto> Tasks { get; set; }
    private List<TaskDto> FilteredTasks { get; set; }
    public EventCallback<TaskDto> TaskChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Tasks = new List<TaskDto>(await TaskManager.GetTasks(AuthStateProvider.Token));
            FilteredTasks = new List<TaskDto>(Tasks);
        }
        catch (Exception e)
        {
            Error = e.Message;
        }
        StateHasChanged();
    }

    private async Task AddTask(TaskDto newTask)
    {
        try
        {
            newTask.Id = await TaskManager.CreateTask(newTask, AuthStateProvider.Token);
            Tasks.Add(newTask);
        }
        catch (Exception e)
        {
            Error = e.Message;
        }
        StateHasChanged();
    }

    private async Task ChangeTaskStatus(TaskDto changedTask)
    {
        try
        {
            await TaskManager.ChangeStatus(changedTask, AuthStateProvider.Token);
            changedTask.IsFinished = !changedTask.IsFinished;
        }
        catch (Exception e)
        {
            Error = e.Message;
        }
        StateHasChanged();
    }

    private async Task RemoveTask(TaskDto removedTask)
    {
        try
        {
            await TaskManager.RemoveTask(removedTask.Id, AuthStateProvider.Token);
            Tasks.Remove(removedTask);
        }
        catch (Exception e)
        {
            Error = e.Message;
        }
        StateHasChanged();
    }

    private void FilterChanged(string filterText, Filters filter)
    {
        if (Tasks == null)
            return;
        Predicate<TaskDto> predicate = null;
        switch (filter)
        {
            case Filters.All:
                {
                    predicate = task => task.Title.StartsWith(filterText);
                    break;
                }
            case Filters.Finished:
                {
                    predicate = task => task.IsFinished && task.Title.StartsWith(filterText);
                    break;
                }
            case Filters.Unfinished:
                {
                    predicate = task => !task.IsFinished && task.Title.StartsWith(filterText);
                    break;
                }
        }
        FilteredTasks = Tasks.Where(task => predicate.Invoke(task)).ToList();
        StateHasChanged();
    }
}
